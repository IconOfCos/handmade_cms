#!/usr/bin/env node

import { Command } from 'commander';
import { MarkdownParser } from './parser.js';
import { SiteBuilder, SiteConfig } from './builder.js';
import { fileExists } from './utils.js';

const program = new Command();

program
  .name('handmade-cms')
  .description('Static site generator using TypeScript')
  .version('1.0.0');

program
  .command('build')
  .description('Build the static site')
  .option('-c, --content <path>', 'Content directory', 'content')
  .option('-t, --templates <path>', 'Templates directory', 'templates')
  .option('-r, --resources <path>', 'Resource files directory', 'resources')
  .option('-o, --output <path>', 'Output directory', 'static')
  .option('--clean', 'Clean output directory before build')
  .action(async (options) => {
    try {
      const config: SiteConfig = {
        title: 'My Static Site',
        description: 'Generated by Handmade CMS',
        baseUrl: '/'
      };

      const parser = new MarkdownParser();
      const builder = new SiteBuilder(
        options.content,
        options.templates,
        options.resources,
        options.output,
        config
      );

      if (options.clean) {
        await builder.clean();
        console.log('‚úì Cleaned output directory');
      }

      if (!(await fileExists(options.content))) {
        console.error(`‚ùå Content directory not found: ${options.content}`);
        process.exit(1);
      }

      console.log('üìñ Parsing markdown files...');
      const posts = await parser.parseDirectory(options.content);
      console.log(`‚úì Parsed ${posts.length} posts`);

      console.log('üî® Building site...');
      await builder.buildSite(posts);
      console.log(`‚úì Site built successfully in ${options.output}`);

    } catch (error) {
      console.error('‚ùå Build failed:', error);
      process.exit(1);
    }
  });

program
  .command('clean')
  .description('Clean the output directory')
  .option('-o, --output <path>', 'Output directory', 'static')
  .action(async (options) => {
    try {
      const builder = new SiteBuilder();
      await builder.clean();
      console.log(`‚úì Cleaned ${options.output}`);
    } catch (error) {
      console.error('‚ùå Clean failed:', error);
      process.exit(1);
    }
  });

program.parse();