import { promises as fs } from 'fs';
import path from 'path';
import ejs from 'ejs';
import { PostData } from './parser.js';
import { ensureDir, copyDirectory, fileExists } from './utils.js';

export interface SiteConfig {
  title: string;
  description: string;
  baseUrl: string;
}

export class SiteBuilder {
  private contentDir: string;
  private templatesDir: string;
  private resourceDir: string;
  private outputDir: string;
  private config: SiteConfig;

  constructor(
    contentDir = 'content',
    templatesDir = 'templates',
    resourceDir = 'resources',
    outputDir = 'static',
    config: SiteConfig = {
      title: 'My Static Site',
      description: 'Generated by Handmade CMS',
      baseUrl: '/'
    }
  ) {
    this.contentDir = contentDir;
    this.templatesDir = templatesDir;
    this.resourceDir = resourceDir;
    this.outputDir = outputDir;
    this.config = config;
  }

  async buildSite(posts: PostData[]): Promise<void> {
    await ensureDir(this.outputDir);
    
    await this.generatePostPages(posts);
    await this.generateIndexPage(posts);
    await this.copyResourceFiles();
  }

  private async generatePostPages(posts: PostData[]): Promise<void> {
    const postTemplatePath = path.join(this.templatesDir, 'post.html');
    
    if (!(await fileExists(postTemplatePath))) {
      console.warn(`Post template not found at ${postTemplatePath}`);
      return;
    }
    
    const postTemplate = await fs.readFile(postTemplatePath, 'utf-8');
    
    for (const post of posts) {
      const html = ejs.render(postTemplate, {
        post,
        site: this.config,
      });
      
      const outputPath = path.join(this.outputDir, `${post.slug}.html`);
      await fs.writeFile(outputPath, html);
    }
  }

  private async generateIndexPage(posts: PostData[]): Promise<void> {
    const indexTemplatePath = path.join(this.templatesDir, 'index.html');
    
    if (!(await fileExists(indexTemplatePath))) {
      console.warn(`Index template not found at ${indexTemplatePath}`);
      return;
    }
    
    const indexTemplate = await fs.readFile(indexTemplatePath, 'utf-8');
    
    const html = ejs.render(indexTemplate, {
      posts,
      site: this.config,
    });
    
    const outputPath = path.join(this.outputDir, 'index.html');
    await fs.writeFile(outputPath, html);
  }

  private async copyResourceFiles(): Promise<void> {
    if (await fileExists(this.resourceDir)) {
      await copyDirectory(this.resourceDir, this.outputDir);
    }
  }

  async clean(): Promise<void> {
    if (await fileExists(this.outputDir)) {
      await fs.rm(this.outputDir, { recursive: true, force: true });
    }
  }
}